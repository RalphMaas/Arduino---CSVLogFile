//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EcoProject1
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using Eco.Services;
    using Eco.ObjectRepresentation;
    using Eco.ObjectImplementation;
    using Eco.Subscription;
    using Eco.UmlRt;
    using Eco.UmlCodeAttributes;

    [UmlElement(Id = "0017d588-d3cf-433b-b763-93ae056419c3")]
    public partial class Class1 : Eco.ObjectImplementation.ILoopBack2, System.ComponentModel.INotifyPropertyChanged
    {

        #region *** Constructors ***

        public Class1(Eco.ObjectRepresentation.IEcoServiceProvider serviceProvider)
        {
            this.Initialize(serviceProvider);
            try
            {
                this.ObjectCreated();
            }
            catch (System.Exception)
            {
                this.Deinitialize(serviceProvider);
                throw;
            }
        }

        // For framework internal use only
        // Constructor public for one reason only; to avoid need for ReflectionPermission in reduced trust
        public Class1(Eco.ObjectImplementation.IContent content)
        {
            this.eco_Content = content;
            content.AssertLoopbackUnassigned();
        }

        /// <summary>This method is called when the object has been created the first time (not when loaded from a db)</summary>
        partial void ObjectCreated();

        /// <summary>This method is called before the object is deleted. You can perform custom clean up or prevent the deletion by returning false or throw an exception (preferably EcoObjectDeleteException)</summary>
        partial void PreDelete(ref System.Boolean canDelete);

        #endregion *** Constructors ***

        #region *** ILoopback implementation ***

        public virtual void set_MemberByIndex(int index, object value)
        {
            throw new System.IndexOutOfRangeException();
        }

        public virtual object get_MemberByIndex(int index)
        {
            throw new System.IndexOutOfRangeException();
        }

        Eco.ObjectRepresentation.IObject Eco.ObjectRepresentation.IObjectProvider.AsIObject()
        {
            return this.eco_Content.AsIObject();
        }

        void Eco.ObjectImplementation.ILoopBack2.SetContent(Eco.ObjectImplementation.IContent content)
        {
            if ((this.eco_Content != null))
            {
                throw new System.InvalidOperationException();
            }
            this.eco_Content = content;
        }

        #endregion *** ILoopback implementation ***

        #region *** LoopbackIndex declarations ***

        public class Eco_LoopbackIndices
        {

            public const int Eco_FirstMember = 0;

            public const int Attribute1 = Eco_FirstMember;

            public const int Class2 = (Attribute1 + 1);

            public const int Eco_MemberCount = (Class2 + 1);
        }

        #endregion *** LoopbackIndex declarations ***

        #region *** IObjectProvider implementation ***

        public virtual Eco.ObjectRepresentation.IObjectInstance AsIObject()
        {
            return this.eco_Content.AsIObject();
        }

        #endregion *** IObjectProvider implementation ***

        #region *** INotifyPropertyChanged implementation ***

        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
        {

            add { eco_Content.PropertyChanged += value; }

            remove { eco_Content.PropertyChanged -= value; }

        }

        #endregion *** INotifyPropertyChanged implementation ***

        #region *** ECO framework implementations ***

        protected Eco.ObjectImplementation.IContent eco_Content;

        protected virtual void Initialize(Eco.ObjectRepresentation.IEcoServiceProvider serviceProvider)
        {
            if ((this.eco_Content == null))
            {
                Eco.ObjectImplementation.IInternalObjectContentFactory factory = serviceProvider.GetEcoService<Eco.ObjectImplementation.IInternalObjectContentFactory>();
                factory.CreateContent(this);
                this.eco_Content.LoopbackValid();
            }
        }

        protected virtual void Deinitialize(Eco.ObjectRepresentation.IEcoServiceProvider serviceProvider)
        {
            if ((this.eco_Content == null))
            {
                Eco.ObjectImplementation.IInternalObjectContentFactory factory = serviceProvider.GetEcoService<Eco.ObjectImplementation.IInternalObjectContentFactory>();
                factory.CreateContentFailed(this.eco_Content, this);
                this.eco_Content = null;
            }
        }

        #endregion *** ECO framework implementations ***

        [UmlElement(Id = "89122322-2cab-435d-8720-ab8c961dc818", Index = Eco_LoopbackIndices.Attribute1)]
        public string Attribute1
        {
            get
            {
                return ((string)(this.eco_Content.get_MemberByIndex(Eco_LoopbackIndices.Attribute1)));
            }
            set
            {
                this.eco_Content.set_MemberByIndex(Eco_LoopbackIndices.Attribute1, ((object)(value)));
            }
        }

        [UmlElement("AssociationEnd", Id = "1ff32c2d-8e59-4b68-8250-3f08182d12ba", Index = Eco_LoopbackIndices.Class2)]
        [UmlMetaAttribute("association", typeof(EcoProject1Package.Class1Class1Class2Class2), Index = 1)]
        [UmlMetaAttribute("multiplicity", "0..*")]
        public IEcoList<Class2> Class2
        {
            get
            {
                return ((IEcoList<Class2>)(this.eco_Content.get_MemberByIndex(Eco_LoopbackIndices.Class2)));
            }
        }
    }
}
